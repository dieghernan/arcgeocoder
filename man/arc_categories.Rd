% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/arc_categories.R
\name{arc_categories}
\alias{arc_categories}
\title{Categories supported by the ArcGIS REST API}
\usage{
arc_categories(verbose = FALSE)
}
\arguments{
\item{verbose}{if \code{TRUE} then detailed logs are output to the console.}
}
\value{
A \CRANpkg{tibble} with the results.
}
\description{
List of available categories that can be used for filtering
results provided by \code{\link[=arc_geo]{arc_geo()}} and \code{\link[=arc_geo_multi]{arc_geo_multi()}}.
}
\details{
The geocoding service allows users to search for and geocode many types of
addresses and places around the world. This simplifies the application
building process, as developers don't need to know what types of places
their users are searching for, because the service can decipher that.
However, due to this flexibility, it is possible for ambiguous searches to
match to many different places, and users may sometimes receive unexpected
results. For example, a search for a city may match to a street name, or a
search for an airport code may match to a country abbreviation.

For such cases, the service provides the ability to filter out unwanted
geocode results with the \code{category} parameter. The \code{category} parameter
limits the types of places for which the service searches, thus eliminating
false positive matches and potentially speeding up the search process.

The results shows a list of categories with three different hierarchy levels
(\code{level_1}, \code{level_2}, \code{level_3}). If a \code{level_1} category is requested
(i.e. \code{POI}) the child categories may be included also in the results.
}
\examples{
\dontshow{if (arcgeocoder_check_access()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
\donttest{
# Get all possible values

all_cats <- arc_categories()

all_cats

# Using categories

sea_1 <- arc_geo("sea",
  custom_query = list(outFields = "LongLabel,Type"),
  limit = 2
)

# An airport, but if we use categories...

dplyr::glimpse(sea_1)


sea_2 <- arc_geo("sea",
  custom_query = list(outFields = "LongLabel,Type"),
  limit = 2, category = "Restaurant"
)

dplyr::glimpse(sea_2)

# We can use a list of categories separated by comma
sea_3 <- arc_geo("sea",
  custom_query = list(outFields = "LongLabel,Type"),
  sourcecountry = "UK", limit = 5,
  category = "Amusement Park,Aquarium"
)

dplyr::glimpse(sea_3)
}
\dontshow{\}) # examplesIf}
}
\references{
\href{https://developers.arcgis.com/rest/geocode/api-reference/geocoding-category-filtering.htm}{ArcGIS REST Category filtering}
}
\seealso{
\code{\link[=arc_geo]{arc_geo()}}, \code{\link[=arc_geo_multi]{arc_geo_multi()}}
}
\concept{helpers}
