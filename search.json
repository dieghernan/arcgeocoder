[{"path":"https://dieghernan.github.io/arcgeocoder/articles/arcgeocoder.html","id":"why-arcgeocoder","dir":"Articles","previous_headings":"","what":"Why arcgeocoder?","title":"Get started wit arcgeocoder","text":"arcgeocoder package provides lightweight interface geocoding reverse geocoding ArcGIS REST API service. goal arcgeocoder access ArcGIS REST API fewer dependencies, curl . situations, curl may available accessible, arcgeocoder uses base functions overcome limitation. interface apigeocoder built aim easing access features provided API. API endpoints used arcgeocoder findAddressCandidates reverseGeocode, can accessed without need API key.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/articles/arcgeocoder.html","id":"recommended-packages","dir":"Articles","previous_headings":"","what":"Recommended packages","title":"Get started wit arcgeocoder","text":"packages much complete mature nominatimlite, presents similar features: tidygeocoder (Cambon et al. 2021). Allows interface ArcGIS, Nominatim (OpenStreetMaps), Google, TomTom, Mapbox, etc. geocoding reverse geocoding. nominatimlite (Hernangómez 2024). Similar arcgeocoder using data OpenStreetMaps trough Nominatim API service.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/arcgeocoder/articles/arcgeocoder.html","id":"geocoding-and-reverse-geocoding","dir":"Articles","previous_headings":"Usage","what":"Geocoding and reverse geocoding","title":"Get started wit arcgeocoder","text":"Note: examples adapted tidygeocoder package first example geocode addresses using arc_geo() function. Note arcgeocoder works straight away, don’t need provide API key start geocoding! fields returned geocoder service example, full_results = TRUE can used return data geocoder service. perform reverse geocoding (obtaining addresses geographic coordinates), can use arc_reverse_geo() function. arguments similar arc_geo() function, now specify input data columns x y arguments. dataset used geocoder query . single line address returned column named address. possible also search specific locations within near reference location using category filtering. See information documentation data base arc_categories. following example look POIs related food (.e. Restaurants, Coffee Shops, Bakeries) near Eiffel Tower France.","code":"library(arcgeocoder) library(dplyr)  # create a dataframe with addresses some_addresses <- tribble(   ~name,                  ~addr,   \"White House\",          \"1600 Pennsylvania Ave NW, Washington, DC\",   \"Transamerica Pyramid\", \"600 Montgomery St, San Francisco, CA 94111\",   \"Willis Tower\",         \"233 S Wacker Dr, Chicago, IL 60606\" )  # geocode the addresses lat_longs <- arc_geo(some_addresses$addr, lat = \"latitude\", long = \"longitude\") #>    |                                                           |                                                  |   0%   |                                                           |=================                                 |  33%   |                                                           |=================================                 |  67%   |                                                           |==================================================| 100% reverse <- arc_reverse_geo(   x = lat_longs$longitude,   y = lat_longs$latitude,   address = \"address_found\" ) #>    |                                                           |                                                  |   0%   |                                                           |=================                                 |  33%   |                                                           |=================================                 |  67%   |                                                           |==================================================| 100% library(ggplot2) # For plotting  # Step 1: Locate Eiffel Tower, using multifield query  eiffel_tower <- arc_geo_multi(   address = \"Tour Eiffel\",   city = \"Paris\",   countrycode = \"FR\",   langcode = \"FR\",   custom_query = list(outFields = \"LongLabel\") )  # Display results eiffel_tower %>%   select(lon, lat, LongLabel) #> # A tibble: 1 × 3 #>     lon   lat LongLabel                                                          #>   <dbl> <dbl> <chr>                                                              #> 1  2.29  48.9 Tour Eiffel, 3 Esplanade des Ouvriers de la Tour Eiffel, 75007, 7…   # Use lon,lat to boots the search and using category = Food food_eiffel <- arc_geo_categories(\"Food\",   x = eiffel_tower$lon,   y = eiffel_tower$lat,   limit = 50, full_results = TRUE )  # Plot  by Food Type ggplot(eiffel_tower, aes(x, y)) +   geom_point(shape = 17, color = \"red\", size = 4) +   geom_point(data = food_eiffel, aes(x, y, color = Type)) +   labs(     title = \"Food near the Eiffel Tower\",     subtitle = \"Using arcgecoder\",     color = \"Type of place\",     x = \"\",     y = \"\",     caption = \"Data from ArcGIS REST API services\"   )"},{"path":"https://dieghernan.github.io/arcgeocoder/articles/arcgeocoder.html","id":"arcgeocoder-and-r-spatial","dir":"Articles","previous_headings":"Usage","what":"arcgeocoder and r-spatial","title":"Get started wit arcgeocoder","text":"See additional articles showing arcgeocoder can use combination leaflet create dynamic maps sf terra create static maps.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/arcgeocoder/articles/ex_leaflet.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Example: arcgeocoder and leaflet maps","text":"following example shows possible create nice leaflet map data retrieved arcgeocoder. widget browsable filterable thanks crosstalk reactable:","code":"# Coffee Shops and Bakeries around the Eiffel Tower   library(arcgeocoder) library(leaflet) library(dplyr) library(reactable) library(crosstalk)  # Step 1: Eiffel Tower  eiffel_tower <- arc_geo_multi(\"Eiffel Tower\",   city = \"Paris\", countrycode = \"FR\",   category = \"POI\" )  # Base url for icons icon_url <- paste0(   \"https://raw.githubusercontent.com/dieghernan/arcgeocoder/\",   \"main/vignettes/articles/\" ) eiffel_icon <- makeIcon(   iconUrl = paste0(icon_url, \"eiffel-tower.png\"),   iconWidth = 50, iconHeight = 50,   iconAnchorX = 25, iconAnchorY = 25 )   # Step 2: Coffee Shops and Bakeries nearby cf_bk <- arc_geo_categories(   category = c(\"Coffee Shop\", \"Bakery\"),   x = eiffel_tower$lon, y = eiffel_tower$lat,   limit = 50,   full_results = TRUE )  # Labels and icons labs <- paste0(\"<strong>\", cf_bk$PlaceName, \"<\/strong><br>\", cf_bk$StAddr)  # Assign icons leaf_icons <- icons(   ifelse(cf_bk$Type == \"Coffee Shop\",     paste0(icon_url, \"coffee-cup.png\"),     paste0(icon_url, \"croissant.png\")   ),   iconWidth = 20, iconHeight = 20,   iconAnchorX = 10, iconAnchorY = 10 )  # Step 3: Crosstalk object cf_bk_data <- cf_bk %>%   select(Place = ShortLabel, Type, Address = Place_addr, City, URL, Phone) %>%   SharedData$new(group = \"Food\")   # Step 4: Leaflet map with crosstalk # Init leaflet map lmend <- leaflet(   data = cf_bk_data,   elementId = \"EiffelTower\", width = \"100%\", height = \"60vh\",   options = leafletOptions(minZoom = 12) ) %>%   setView(eiffel_tower$lon, eiffel_tower$lat, zoom = 16) %>%   addProviderTiles(     provider = \"CartoDB.Positron\",     group = \"CartoDB.Positron\"   ) %>%   addTiles(group = \"OSM\") %>%   addMarkers(data = eiffel_tower, ~lon, ~lat, icon = eiffel_icon) %>%   addMarkers(     lat = cf_bk$lat, lng = cf_bk$lon, popup = labs, icon = leaf_icons   ) %>%   addLayersControl(     baseGroups = c(\"CartoDB.Positron\", \"OSM\"),     position = \"topleft\",     options = layersControlOptions(collapsed = FALSE)   )   # Step 5: Reactable for filtering tb <- reactable(cf_bk_data,   selection = \"multiple\",   onClick = \"select\",   rowStyle = list(cursor = \"pointer\"),   filterable = TRUE,   searchable = TRUE,   showPageSizeOptions = TRUE,   striped = TRUE,   defaultColDef = colDef(vAlign = \"center\", minWidth = 150),   paginationType = \"jump\",   elementId = \"coffees\",   columns = list(     Place = colDef(       sticky = \"left\", rowHeader = TRUE, name = \"\",       cell = function(value) {         htmltools::strong(value)       }     ),     URL = colDef(cell = function(value) {       # Render as a link       if (is.null(value) | is.na(value)) {         return(\"\")       }       htmltools::a(href = value, target = \"_blank\", as.character(value))     }),     Phone = colDef(cell = function(value) {       # Render as a link       if (is.null(value) | is.na(value)) {         return(\"\")       }       clearphone <- gsub(\"-\", \"\", value)       clearphone <- gsub(\" \", \"\", clearphone)       htmltools::a(         href = paste0(\"tel:\", clearphone), target = \"_blank\",         as.character(value)       )     })   ) )"},{"path":"https://dieghernan.github.io/arcgeocoder/articles/ex_leaflet.html","id":"widget","dir":"Articles","previous_headings":"","what":"Widget","title":"Example: arcgeocoder and leaflet maps","text":"","code":"# Last step: Display all htmltools::browsable(   htmltools::tagList(lmend, tb) )"},{"path":"https://dieghernan.github.io/arcgeocoder/articles/ex_leaflet.html","id":"attributions","dir":"Articles","previous_headings":"","what":"Attributions","title":"Example: arcgeocoder and leaflet maps","text":"Eiffel tower icons created Freepik - Flaticon Mug icons created Freepik - Flaticon Croissant icons created Freepik - Flaticon","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/articles/ex_leaflet.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Example: arcgeocoder and leaflet maps","text":"","code":"#> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.4.2 (2024-10-31 ucrt) #>  os       Windows Server 2022 x64 (build 20348) #>  system   x86_64, mingw32 #>  ui       RTerm #>  language en #>  collate  English_United States.utf8 #>  ctype    English_United States.utf8 #>  tz       UTC #>  date     2025-02-05 #>  pandoc   3.1.11 @ C:/HOSTED~1/windows/pandoc/31F387~1.11/x64/PANDOC~1.11/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package           * version date (UTC) lib source #>  arcgeocoder       * 0.2.1   2025-02-05 [1] local #>  bslib               0.9.0   2025-01-30 [1] RSPM #>  cachem              1.1.0   2024-05-16 [1] RSPM #>  cli                 3.6.3   2024-06-21 [1] RSPM #>  crosstalk         * 1.2.1   2023-11-23 [1] RSPM #>  desc                1.4.3   2023-12-10 [1] RSPM #>  digest              0.6.37  2024-08-19 [1] RSPM #>  dplyr             * 1.1.4   2023-11-17 [1] RSPM #>  evaluate            1.0.3   2025-01-10 [1] RSPM #>  fastmap             1.2.0   2024-05-15 [1] RSPM #>  fs                  1.6.5   2024-10-30 [1] RSPM #>  generics            0.1.3   2022-07-05 [1] RSPM #>  glue                1.8.0   2024-09-30 [1] RSPM #>  htmltools           0.5.8.1 2024-04-04 [1] RSPM #>  htmlwidgets         1.6.4   2023-12-06 [1] RSPM #>  httpuv              1.6.15  2024-03-26 [1] RSPM #>  jquerylib           0.1.4   2021-04-26 [1] RSPM #>  jsonlite            1.8.9   2024-09-20 [1] RSPM #>  knitr               1.49    2024-11-08 [1] RSPM #>  later               1.4.1   2024-11-27 [1] RSPM #>  leaflet           * 2.2.2   2024-03-26 [1] RSPM #>  leaflet.providers   2.0.0   2023-10-17 [1] RSPM #>  lifecycle           1.0.4   2023-11-07 [1] RSPM #>  magrittr            2.0.3   2022-03-30 [1] RSPM #>  mime                0.12    2021-09-28 [1] RSPM #>  pillar              1.10.1  2025-01-07 [1] RSPM #>  pkgconfig           2.0.3   2019-09-22 [1] RSPM #>  pkgdown             2.1.1   2024-09-17 [1] any (@2.1.1) #>  promises            1.3.2   2024-11-28 [1] RSPM #>  purrr               1.0.2   2023-08-10 [1] RSPM #>  R.cache             0.16.0  2022-07-21 [1] RSPM #>  R.methodsS3         1.8.2   2022-06-13 [1] RSPM #>  R.oo                1.27.0  2024-11-01 [1] RSPM #>  R.utils             2.12.3  2023-11-18 [1] RSPM #>  R6                  2.5.1   2021-08-19 [1] RSPM #>  ragg                1.3.3   2024-09-11 [1] RSPM #>  Rcpp                1.0.14  2025-01-12 [1] RSPM #>  reactable         * 0.4.4   2023-03-12 [1] RSPM #>  reactR              0.6.1   2024-09-14 [1] RSPM #>  rlang               1.1.5   2025-01-17 [1] RSPM #>  rmarkdown           2.29    2024-11-04 [1] RSPM #>  sass                0.4.9   2024-03-15 [1] RSPM #>  sessioninfo       * 1.2.2   2021-12-06 [1] any (@1.2.2) #>  shiny               1.10.0  2024-12-14 [1] RSPM #>  styler              1.10.3  2024-04-07 [1] RSPM #>  systemfonts         1.2.1   2025-01-20 [1] RSPM #>  textshaping         1.0.0   2025-01-20 [1] RSPM #>  tibble              3.2.1   2023-03-20 [1] RSPM #>  tidyselect          1.2.1   2024-03-11 [1] RSPM #>  vctrs               0.6.5   2023-12-01 [1] RSPM #>  withr               3.0.2   2024-10-28 [1] RSPM #>  xfun                0.50    2025-01-07 [1] RSPM #>  xtable              1.8-4   2019-04-21 [1] RSPM #>  yaml                2.3.10  2024-07-26 [1] RSPM #>  #>  [1] D:/a/_temp/Library #>  [2] C:/R/site-library #>  [3] C:/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://dieghernan.github.io/arcgeocoder/articles/ex_static.html","id":"example-1-sf-objects","dir":"Articles","previous_headings":"","what":"Example 1: sf objects","title":"Example: arcgeocoder and static maps","text":"following example shows possible create nice static map data retrieved arcgeocoder converting sf object:","code":"library(arcgeocoder) library(dplyr) library(sf) # spatial objects library(ggplot2) library(mapSpain) # sf objects of Spain  # McDonalds in Barcelona, Spain  mc <- arc_geo_multi(\"McDonalds\",   city = \"Barcelona\",   region = \"Catalonia\", countrycode = \"ES\",   category = \"Food\", limit = 50,   custom_query = list(outFields = c(\"LongLabel\", \"Type,StAdd\")) )  # To sf mc_sf <- st_as_sf(mc,   coords = c(\"lon\", \"lat\"),   # here we have the wkid   crs = mc$latestWkid[1] )  bcn <- esp_get_munic(munic = \"Barcelona\") %>%   st_transform(mc$latestWkid[1])  ggplot(bcn) +   geom_sf() +   geom_sf(data = mc_sf, color = \"red\") # We can restrict the results to the bbox of BCN in the query bbox <- st_bbox(bcn) %>% paste0(collapse = \",\") bbox #> [1] \"2.05362,41.32175,2.22717,41.46744\"  mc2_sf <- arc_geo_multi(\"McDonalds\",   city = \"Barcelona\",   region = \"Catalonia\", countrycode = \"ES\",   category = \"Food\", limit = 50,   custom_query = list(     outFields = c(\"LongLabel\", \"Type\", \"StAdd\"),     searchExtent = bbox   ) ) %>%   st_as_sf(coords = c(\"lon\", \"lat\"), crs = mc$latestWkid[1])   ggplot(bcn) +   geom_sf() +   geom_sf(data = mc2_sf, color = \"red\")"},{"path":"https://dieghernan.github.io/arcgeocoder/articles/ex_static.html","id":"example-2-terra-objects","dir":"Articles","previous_headings":"","what":"Example 2: terra objects","title":"Example: arcgeocoder and static maps","text":"can add static map tiles thanks maptiles package tidyterra plotting. tiles represented terra objects:","code":"library(maptiles) library(tidyterra)  # Usually use crs 3857 for getting tiles bcn_3857 <- st_transform(bcn, 3857)  osm_tiles <- get_tiles(bcn_3857, provider = \"CartoDB.Positron\", crop = TRUE)  ggplot() +   geom_spatraster_rgb(data = osm_tiles, maxcell = Inf) +   geom_sf(data = bcn, fill = NA, color = \"black\", linewidth = 1) +   geom_sf(data = mc2_sf, color = \"red\") +   coord_sf(crs = 3857) +   labs(caption = \"(c) OpenStreetMap contributors, (c) CARTO\")"},{"path":"https://dieghernan.github.io/arcgeocoder/articles/ex_static.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Example: arcgeocoder and static maps","text":"","code":"#> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.4.2 (2024-10-31 ucrt) #>  os       Windows Server 2022 x64 (build 20348) #>  system   x86_64, mingw32 #>  ui       RTerm #>  language en #>  collate  English_United States.utf8 #>  ctype    English_United States.utf8 #>  tz       UTC #>  date     2025-02-05 #>  pandoc   3.1.11 @ C:/HOSTED~1/windows/pandoc/31F387~1.11/x64/PANDOC~1.11/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package     * version date (UTC) lib source #>  arcgeocoder * 0.2.1   2025-02-05 [1] local #>  bslib         0.9.0   2025-01-30 [1] RSPM #>  cachem        1.1.0   2024-05-16 [1] RSPM #>  class         7.3-22  2023-05-03 [3] CRAN (R 4.4.2) #>  classInt      0.4-11  2025-01-08 [1] RSPM #>  cli           3.6.3   2024-06-21 [1] RSPM #>  codetools     0.2-20  2024-03-31 [3] CRAN (R 4.4.2) #>  colorspace    2.1-1   2024-07-26 [1] RSPM #>  curl          6.2.0   2025-01-23 [1] RSPM #>  DBI           1.2.3   2024-06-02 [1] RSPM #>  desc          1.4.3   2023-12-10 [1] RSPM #>  digest        0.6.37  2024-08-19 [1] RSPM #>  dplyr       * 1.1.4   2023-11-17 [1] RSPM #>  e1071         1.7-16  2024-09-16 [1] RSPM #>  evaluate      1.0.3   2025-01-10 [1] RSPM #>  farver        2.1.2   2024-05-13 [1] RSPM #>  fastmap       1.2.0   2024-05-15 [1] RSPM #>  fs            1.6.5   2024-10-30 [1] RSPM #>  generics      0.1.3   2022-07-05 [1] RSPM #>  ggplot2     * 3.5.1   2024-04-23 [1] RSPM #>  glue          1.8.0   2024-09-30 [1] RSPM #>  gtable        0.3.6   2024-10-25 [1] RSPM #>  htmltools     0.5.8.1 2024-04-04 [1] RSPM #>  htmlwidgets   1.6.4   2023-12-06 [1] RSPM #>  jquerylib     0.1.4   2021-04-26 [1] RSPM #>  jsonlite      1.8.9   2024-09-20 [1] RSPM #>  KernSmooth    2.23-24 2024-05-17 [3] CRAN (R 4.4.2) #>  knitr         1.49    2024-11-08 [1] RSPM #>  lifecycle     1.0.4   2023-11-07 [1] RSPM #>  magrittr      2.0.3   2022-03-30 [1] RSPM #>  mapSpain    * 0.10.0  2024-12-15 [1] RSPM #>  maptiles    * 0.9.0   2025-02-04 [1] RSPM #>  munsell       0.5.1   2024-04-01 [1] RSPM #>  pillar        1.10.1  2025-01-07 [1] RSPM #>  pkgconfig     2.0.3   2019-09-22 [1] RSPM #>  pkgdown       2.1.1   2024-09-17 [1] any (@2.1.1) #>  png           0.1-8   2022-11-29 [1] RSPM #>  proxy         0.4-27  2022-06-09 [1] RSPM #>  purrr         1.0.2   2023-08-10 [1] RSPM #>  R.cache       0.16.0  2022-07-21 [1] RSPM #>  R.methodsS3   1.8.2   2022-06-13 [1] RSPM #>  R.oo          1.27.0  2024-11-01 [1] RSPM #>  R.utils       2.12.3  2023-11-18 [1] RSPM #>  R6            2.5.1   2021-08-19 [1] RSPM #>  ragg          1.3.3   2024-09-11 [1] RSPM #>  rappdirs      0.3.3   2021-01-31 [1] RSPM #>  Rcpp          1.0.14  2025-01-12 [1] RSPM #>  rlang         1.1.5   2025-01-17 [1] RSPM #>  rmarkdown     2.29    2024-11-04 [1] RSPM #>  sass          0.4.9   2024-03-15 [1] RSPM #>  scales        1.3.0   2023-11-28 [1] RSPM #>  sessioninfo * 1.2.2   2021-12-06 [1] any (@1.2.2) #>  sf          * 1.0-19  2024-11-05 [1] RSPM #>  slippymath    0.3.1   2019-06-28 [1] RSPM #>  styler        1.10.3  2024-04-07 [1] RSPM #>  systemfonts   1.2.1   2025-01-20 [1] RSPM #>  terra         1.8-15  2025-01-24 [1] RSPM #>  textshaping   1.0.0   2025-01-20 [1] RSPM #>  tibble        3.2.1   2023-03-20 [1] RSPM #>  tidyr         1.3.1   2024-01-24 [1] RSPM #>  tidyselect    1.2.1   2024-03-11 [1] RSPM #>  tidyterra   * 0.7.0   2025-02-03 [1] RSPM #>  units         0.8-5   2023-11-28 [1] RSPM #>  vctrs         0.6.5   2023-12-01 [1] RSPM #>  withr         3.0.2   2024-10-28 [1] RSPM #>  xfun          0.50    2025-01-07 [1] RSPM #>  yaml          2.3.10  2024-07-26 [1] RSPM #>  #>  [1] D:/a/_temp/Library #>  [2] C:/R/site-library #>  [3] C:/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://dieghernan.github.io/arcgeocoder/articles/featuretypes.html","id":"reverse-geocode-details","dir":"Articles","previous_headings":"","what":"Reverse geocode details","title":"Reverse geocoding and feature types","text":"purpose reverse geocoding answer question: ’s near location? answer question, reverseGeocode operation provided ArcGIS REST API returns relevant feature near input location based prioritized hierarchy feature types. hierarchy summarized table , ordered descending priority. Unless otherwise noted, feature type returned distance input location feature within tolerance specified Search Tolerance column. Table 1: Adapted ArcGIS REST API reverseGeocode arcgeocoder, hierarchy implemented arc_reverse_geo(), specifically featuretypes parameter. default value (featuretypes = NULL) include parameter API call. case, hierarchy presented previous table apply. possible narrow output query specific feature type list feature types.possible values supported parameter : \"StreetInt\" \"DistanceMarker\" \"StreetAddress\" \"StreetName\" \"POI\" \"Subaddress\" \"PointAddress\" \"Postal\" \"Locality\" mentioned, possible include several feature types. one value specified parameter, values must separated comma, spaces comma.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/articles/featuretypes.html","id":"single-featuretypes-value","dir":"Articles","previous_headings":"Reverse geocode details","what":"single featuretypes value","title":"Reverse geocoding and feature types","text":"","code":"arc_reverse_geo(..., featuretypes = \"PointAddress\")"},{"path":"https://dieghernan.github.io/arcgeocoder/articles/featuretypes.html","id":"multiple-featuretypes-value","dir":"Articles","previous_headings":"Reverse geocode details","what":"multiple featuretypes value","title":"Reverse geocoding and feature types","text":"","code":"arc_reverse_geo(..., featuretypes = c(\"PointAddress\", \"StreetAddress\"))"},{"path":"https://dieghernan.github.io/arcgeocoder/articles/featuretypes.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Reverse geocoding and feature types","text":"following examples, provide different examples better understanding.","code":"library(arcgeocoder) library(dplyr)"},{"path":"https://dieghernan.github.io/arcgeocoder/articles/featuretypes.html","id":"example-1-match-to-poi-centroid-returned","dir":"Articles","previous_headings":"Examples","what":"Example 1: Match to POI centroid returned","title":"Reverse geocoding and feature types","text":"example, provide value featuretypes parameter. input location within search tolerance POI PointAddress features, match POI centroid returned higher priority (see Table 1). Note output field Addr_type indicates type feature.","code":"example_x <- -117.203741 example_y <- 40.95029  api_poi <- arc_reverse_geo(   x = example_x, y = example_y,   langcode = \"EN\", full_results = TRUE, verbose = TRUE )  api_poi %>%   select(x, y, address, lon, lat, Addr_type) %>%   knitr::kable()"},{"path":"https://dieghernan.github.io/arcgeocoder/articles/featuretypes.html","id":"example-2-locality-match-returned","dir":"Articles","previous_headings":"Examples","what":"Example 2: Locality match returned","title":"Reverse geocoding and feature types","text":"","code":"api_local <- arc_reverse_geo(   x = example_x, y = example_y,   featuretypes = \"Locality\",   langcode = \"EN\", full_results = TRUE, verbose = TRUE )  api_local %>%   select(x, y, address, lon, lat, Addr_type) %>%   knitr::kable()"},{"path":"https://dieghernan.github.io/arcgeocoder/articles/featuretypes.html","id":"example-3-multiple-values","dir":"Articles","previous_headings":"Examples","what":"Example 3: multiple values","title":"Reverse geocoding and feature types","text":"multiple values included API call, hierarchy explained Table 1 still applied requested featuretypes.","code":"api_multiple <- arc_reverse_geo(   x = example_x, y = example_y,   featuretypes = c(\"Locality\", \"StreetInt\", \"StreetAddress\"),   langcode = \"EN\", full_results = TRUE, verbose = TRUE )  api_multiple %>%   select(x, y, address, lon, lat, Addr_type) %>%   knitr::kable()"},{"path":"https://dieghernan.github.io/arcgeocoder/articles/featuretypes.html","id":"example-4-no-results-for-specific-featuretypes","dir":"Articles","previous_headings":"Examples","what":"Example 4: No results for specific featuretypes","title":"Reverse geocoding and feature types","text":"following example present case certain featuretypes near requested location. case, reverse geocoding North Pole API return Locality StreetAddress found. possible return results, arc_reverse_geo() returns empty tibble.","code":"# North Pole  npole <- arc_reverse_geo(x = 0, y = 90, langcode = \"EN\", full_results = TRUE)  npole %>%   select(x, y, address, lon, lat, Addr_type) %>%   knitr::kable() # But no StreetAddress npole2 <- arc_reverse_geo(   x = 0, y = 90, langcode = \"EN\", full_results = TRUE,   featuretypes = \"StreetAddress\" )  npole2 %>%   knitr::kable()"},{"path":"https://dieghernan.github.io/arcgeocoder/articles/featuretypes.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Reverse geocoding and feature types","text":"API return different results x,y values depending value featuretypes. using featuretypes = NULL feature type returned depend hierarchy explained Table 1. Depending location, featuretype filter may return results, hence general purposes using featuretypes = NULL safer.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Diego Hernangómez. Author, maintainer, copyright holder.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hernangómez D (2025). arcgeocoder: Geocoding ArcGIS REST API Service. doi:10.32614/CRAN.package.arcgeocoder, https://dieghernan.github.io/arcgeocoder/.","code":"@Manual{R-arcgeocoder,   title = {{arcgeocoder}: Geocoding with the {ArcGIS} {REST} {API} Service},   doi = {10.32614/CRAN.package.arcgeocoder},   author = {Diego Hernangómez},   year = {2025},   version = {0.2.1},   url = {https://dieghernan.github.io/arcgeocoder/},   abstract = {Lite interface for finding locations of addresses or businesses around the world using the ArcGIS REST API service <https://developers.arcgis.com/rest/geocode/api-reference/overview-world-geocoding-service.htm>. Address text can be converted to location candidates and a location can be converted into an address. No API key required.}, }"},{"path":[]},{"path":"https://dieghernan.github.io/arcgeocoder/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"CONTRIBUTING","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES ✔️: edit roxygen comment .R file R/. ❌: edit .Rd file man/.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"CONTRIBUTING","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"CONTRIBUTING","text":"recommend create Git branch pull request (PR). Look R-CMD-check build status . making changes, run devtools::check() ensure new Notes, Warnings Errors appearing. recommend tidyverse style guide. also use styler package apply styles, please don’t restyle code nothing PR. use roxygen2. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/CONTRIBUTING.html","id":"prefer-to-email","dir":"","previous_headings":"","what":"Prefer to Email?","title":"CONTRIBUTING","text":"Email person listed maintainer DESCRIPTION file repo. Though note private discussions email don’t help others - course email totally warranted ’s sensitive problem kind.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/CONTRIBUTING.html","id":"thanks-for-contributing","dir":"","previous_headings":"","what":"Thanks for contributing!","title":"CONTRIBUTING","text":"contributing guide adapted tidyverse contributing guide available https://raw.githubusercontent.com/r-lib/usethis/master/inst/templates/tidy-contributing.md","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/index.html","id":"arcgeocoder-","dir":"","previous_headings":"","what":"arcgeocoder | Geocoding with the ArcGIS REST API Service","title":"arcgeocoder | Geocoding with the ArcGIS REST API Service","text":"goal arcgeocoder provide light interface geocoding addresses reverse geocoding location trough ArcGIS REST API Geocoding Service. Full site examples vignettes https://dieghernan.github.io/arcgeocoder/","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/index.html","id":"why-arcgeocoder","dir":"","previous_headings":"","what":"Why arcgeocoder?","title":"arcgeocoder | Geocoding with the ArcGIS REST API Service","text":"arcgeocoder package provides lightweight interface geocoding reverse geocoding ArcGIS REST API service. goal arcgeocoder access ArcGIS REST API fewer dependencies, curl. situations, curl may available accessible, arcgeocoder uses base functions overcome limitation. interface apigeocoder built aim easing access features provided API. API endpoints used arcgeocoder findAddressCandidates reverseGeocode, can accessed without need API key.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/index.html","id":"recommended-packages","dir":"","previous_headings":"","what":"Recommended packages","title":"arcgeocoder | Geocoding with the ArcGIS REST API Service","text":"packages much complete mature arcgeocoder, presents similar features: tidygeocoder (Cambon et al. 2021). Allows interface ArcGIS, Nominatim (OpenStreetMaps), Google, TomTom, Mapbox, etc. geocoding reverse geocoding. nominatimlite (Hernangómez 2024). Similar arcgeocoder using data OpenStreetMaps trough Nominatim API service.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"arcgeocoder | Geocoding with the ArcGIS REST API Service","text":"Install arcgeocoder CRAN : can install developing version arcgeocoder : Alternatively, can install arcgeocoder using r-universe:","code":"install.packages(\"arcgeocoder\") remotes::install_github(\"dieghernan/arcgeocoder\") # Install arcgeocoder in R: install.packages(\"arcgeocoder\",   repos = c(     \"https://dieghernan.r-universe.dev\",     \"https://cloud.r-project.org\"   ) )"},{"path":[]},{"path":"https://dieghernan.github.io/arcgeocoder/index.html","id":"geocoding-and-reverse-geocoding","dir":"","previous_headings":"Usage","what":"Geocoding and reverse geocoding","title":"arcgeocoder | Geocoding with the ArcGIS REST API Service","text":"Note: examples adapted tidygeocoder package first example geocode addresses using arc_geo() function. Note arcgeocoder works straight away, don’t need provide API key start geocoding! fields returned geocoder service example, full_results = TRUE can used return data geocoder service. perform reverse geocoding (obtaining addresses geographic coordinates), can use arc_reverse_geo() function. arguments similar arc_geo() function, now specify input data columns x y arguments. dataset used geocoder query . single line address returned column named address. possible also search specific locations within near reference location using category filtering. See information documentation data base arc_categories. following example look POIs related food (.e. Restaurants, Coffee Shops, Bakeries) near Eiffel Tower France. Example: Food places near Eiffel Tower","code":"library(arcgeocoder) library(dplyr)  # create a dataframe with addresses some_addresses <- tribble(   ~name,                  ~addr,   \"White House\",          \"1600 Pennsylvania Ave NW, Washington, DC\",   \"Transamerica Pyramid\", \"600 Montgomery St, San Francisco, CA 94111\",   \"Willis Tower\",         \"233 S Wacker Dr, Chicago, IL 60606\" )  # geocode the addresses lat_longs <- arc_geo(some_addresses$addr, lat = \"latitude\", long = \"longitude\") #>   |                                                          |                                                  |   0%  |                                                          |=================                                 |  33%  |                                                          |=================================                 |  67%  |                                                          |==================================================| 100% reverse <- arc_reverse_geo(   x = lat_longs$longitude,   y = lat_longs$latitude,   address = \"address_found\" ) #>   |                                                          |                                                  |   0%  |                                                          |=================                                 |  33%  |                                                          |=================================                 |  67%  |                                                          |==================================================| 100% library(ggplot2) # For plotting  # Step 1: Locate Eiffel Tower, using multifield query  eiffel_tower <- arc_geo_multi(   address = \"Tour Eiffel\",   city = \"Paris\",   countrycode = \"FR\",   langcode = \"FR\",   custom_query = list(outFields = \"LongLabel\") )  # Display results eiffel_tower %>%   select(lon, lat, LongLabel) #> # A tibble: 1 × 3 #>     lon   lat LongLabel                                                          #>   <dbl> <dbl> <chr>                                                              #> 1  2.29  48.9 Tour Eiffel, 3 Esplanade des Ouvriers de la Tour Eiffel, 75007, 7…   # Use lon,lat to boots the search and using category = Food food_eiffel <- arc_geo_categories(\"Food\",   x = eiffel_tower$lon,   y = eiffel_tower$lat,   limit = 50, full_results = TRUE )  # Plot by Food Type ggplot(eiffel_tower, aes(x, y)) +   geom_point(shape = 17, color = \"red\", size = 4) +   geom_point(data = food_eiffel, aes(x, y, color = Type)) +   labs(     title = \"Food near the Eiffel Tower\",     subtitle = \"Using arcgecoder\",     color = \"Type of place\",     x = \"\",     y = \"\",     caption = \"Data from ArcGIS REST API services\"   )"},{"path":"https://dieghernan.github.io/arcgeocoder/index.html","id":"arcgeocoder-and-r-spatial","dir":"","previous_headings":"Usage","what":"arcgeocoder and r-spatial","title":"arcgeocoder | Geocoding with the ArcGIS REST API Service","text":"straightforward convert results arcgeocoder sf object (geospatial format): Example: Food places near Eiffel Tower using sf package. See additional articles showing arcgeocoder can use combination leaflet create dynamic maps sf terra create static maps.","code":"library(sf)  food_eiffel_sf <- st_as_sf(food_eiffel,   coords = c(\"lon\", \"lat\"),   # The CRS of the resulting coords is here   crs = eiffel_tower$wkid )  food_eiffel_sf #> Simple feature collection with 50 features and 77 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 2.2899 ymin: 48.855 xmax: 2.300063 ymax: 48.86265 #> Geodetic CRS:  WGS 84 #> # A tibble: 50 × 78 #>    q_category   q_x   q_y q_bbox_xmin q_bbox_ymin q_bbox_xmax q_bbox_ymax #>  * <chr>      <dbl> <dbl> <lgl>       <lgl>       <lgl>       <lgl>       #>  1 Food        2.29  48.9 NA          NA          NA          NA          #>  2 Food        2.29  48.9 NA          NA          NA          NA          #>  3 Food        2.29  48.9 NA          NA          NA          NA          #>  4 Food        2.29  48.9 NA          NA          NA          NA          #>  5 Food        2.29  48.9 NA          NA          NA          NA          #>  6 Food        2.29  48.9 NA          NA          NA          NA          #>  7 Food        2.29  48.9 NA          NA          NA          NA          #>  8 Food        2.29  48.9 NA          NA          NA          NA          #>  9 Food        2.29  48.9 NA          NA          NA          NA          #> 10 Food        2.29  48.9 NA          NA          NA          NA          #> # ℹ 40 more rows #> # ℹ 71 more variables: address <chr>, score <int>, x <dbl>, y <dbl>, #> #   Loc_name <chr>, Status <chr>, Score <int>, Match_addr <chr>, #> #   LongLabel <chr>, ShortLabel <chr>, Addr_type <chr>, Type <chr>, #> #   PlaceName <chr>, Place_addr <chr>, Phone <chr>, URL <chr>, Rank <int>, #> #   AddBldg <chr>, AddNum <chr>, AddNumFrom <chr>, AddNumTo <chr>, #> #   AddRange <chr>, Side <chr>, StPreDir <chr>, StPreType <chr>, …  ggplot(food_eiffel_sf) +   geom_sf(aes(color = Type)) +   coord_sf(crs = 3035)"},{"path":"https://dieghernan.github.io/arcgeocoder/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"arcgeocoder | Geocoding with the ArcGIS REST API Service","text":"Hernangómez D (2025). arcgeocoder: Geocoding ArcGIS REST API Service. doi:10.32614/CRAN.package.arcgeocoder, https://dieghernan.github.io/arcgeocoder/. BibTeX entry LaTeX users ","code":"@Manual{R-arcgeocoder,   title = {{arcgeocoder}: Geocoding with the {ArcGIS} {REST} {API} Service},   doi = {10.32614/CRAN.package.arcgeocoder},   author = {Diego Hernangómez},   year = {2025},   version = {0.2.1},   url = {https://dieghernan.github.io/arcgeocoder/},   abstract = {Lite interface for finding locations of addresses or businesses around the world using the ArcGIS REST API service <https://developers.arcgis.com/rest/geocode/api-reference/overview-world-geocoding-service.htm>. Address text can be converted to location candidates and a location can be converted into an address. No API key required.}, }"},{"path":[]},{"path":"https://dieghernan.github.io/arcgeocoder/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"arcgeocoder | Geocoding with the ArcGIS REST API Service","text":"contributions project gratefully acknowledged using allcontributors package following -contributors specification. Contributions kind welcome!","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 arcgeocoder authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arcgeocoder-package.html","id":null,"dir":"Reference","previous_headings":"","what":"arcgeocoder: Geocoding with the 'ArcGIS' REST API Service — arcgeocoder-package","title":"arcgeocoder: Geocoding with the 'ArcGIS' REST API Service — arcgeocoder-package","text":"Lite interface finding locations addresses businesses around world using 'ArcGIS' REST API service https://developers.arcgis.com/rest/geocode/api-reference/overview-world-geocoding-service.htm. Address text can converted location candidates location can converted address. API key required.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arcgeocoder-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"arcgeocoder: Geocoding with the 'ArcGIS' REST API Service — arcgeocoder-package","text":"Maintainer: Diego Hernangómez diego.hernangomezherrero@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arcgeocoder_check_access.html","id":null,"dir":"Reference","previous_headings":"","what":"Check access to ArcGIS REST — arcgeocoder_check_access","title":"Check access to ArcGIS REST — arcgeocoder_check_access","text":"Check R access resources ArcGIS REST API https://developers.arcgis.com/rest/geocode/api-reference/overview-world-geocoding-service.htm.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arcgeocoder_check_access.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check access to ArcGIS REST — arcgeocoder_check_access","text":"","code":"arcgeocoder_check_access()"},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arcgeocoder_check_access.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check access to ArcGIS REST — arcgeocoder_check_access","text":"logical.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arcgeocoder_check_access.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check access to ArcGIS REST — arcgeocoder_check_access","text":"","code":"# \\donttest{ arcgeocoder_check_access() #> [1] TRUE # }"},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_api_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for centralize API queries — arc_api_call","title":"Helper function for centralize API queries — arc_api_call","text":"wrapper utils::download.file(). warning error retry call.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_api_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for centralize API queries — arc_api_call","text":"","code":"arc_api_call(url, destfile, quiet)"},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_api_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for centralize API queries — arc_api_call","text":"url character string (longer vector     \"libcurl\" method) naming URL resource     downloaded. destfile character string (vector, see url     argument) file path downloaded file     saved.  Tilde-expansion performed. quiet TRUE, suppress status messages (),     progress bar.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_api_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for centralize API queries — arc_api_call","text":"logical TRUE/FALSE","code":""},{"path":[]},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"ArcGIS REST API category data base — arc_categories","title":"ArcGIS REST API category data base — arc_categories","text":"Database available categories can used filtering results provided arc_geo(), arc_geo_multi() arc_geo_categories() tibble format.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_categories.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ArcGIS REST API category data base — arc_categories","text":"tibble 376 rows fields: level_1 Top-level category level_2 Second-level category level_3 Child-level category","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_categories.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ArcGIS REST API category data base — arc_categories","text":"ArcGIS REST Category filtering.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_categories.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ArcGIS REST API category data base — arc_categories","text":"See ArcGIS REST Category filtering details examples. geocoding service allows users search geocode many types addresses places around world. simplifies application building process, developers need know types places users searching , service can decipher . However, due flexibility, possible ambiguous searches match many different places, users may sometimes receive unexpected results. example, search city may match street name, search airport code may match country abbreviation. cases, service provides ability filter unwanted geocode results category parameter. category parameter limits types places service searches, thus eliminating false positive matches potentially speeding search process. results shows list categories three different hierarchy levels (level_1, level_2, level_3). level_1 category requested (.e. POI) child categories may included also results.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_categories.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"ArcGIS REST API category data base — arc_categories","text":"Data extracted 10 January 2023.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_categories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ArcGIS REST API category data base — arc_categories","text":"","code":"# \\donttest{ # Get all possible values data(\"arc_categories\") arc_categories #> # A tibble: 376 × 3 #>    level_1 level_2          level_3 #>    <chr>   <chr>            <chr>   #>  1 Address Subaddress       NA      #>  2 Address Point Address    NA      #>  3 Address Street Address   NA      #>  4 Address Distance Marker  NA      #>  5 Address Intersection     NA      #>  6 Address Street Midblock  NA      #>  7 Address Street Name      NA      #>  8 Postal  Primary Postal   NA      #>  9 Postal  Postal Locality  NA      #> 10 Postal  Postal Extension NA      #> # ℹ 366 more rows  # Using categories  sea_1 <- arc_geo(\"sea\",   custom_query = list(outFields = c(\"LongLabel\", \"Type\")),   limit = 2 )   dplyr::glimpse(sea_1) #> Rows: 2 #> Columns: 15 #> $ query      <chr> \"sea\", \"sea\" #> $ lat        <dbl> 47.44362, 47.44899 #> $ lon        <dbl> -122.3029, -122.3093 #> $ address    <chr> \"SEA\", \"SEA\" #> $ score      <int> 100, 100 #> $ x          <dbl> -122.3029, -122.3093 #> $ y          <dbl> 47.44362, 47.44899 #> $ LongLabel  <chr> \"SEA, 17801 International Blvd, Seatac, WA, 98158, USA\", \"S… #> $ Type       <chr> \"Airport\", \"Airport\" #> $ xmin       <dbl> -122.3189, -122.3393 #> $ ymin       <dbl> 47.42762, 47.41899 #> $ xmax       <dbl> -122.2869, -122.2793 #> $ ymax       <dbl> 47.45962, 47.47899 #> $ wkid       <int> 4326, 4326 #> $ latestWkid <int> 4326, 4326  # An airport, but if we use categories...  sea_2 <- arc_geo(\"sea\",   custom_query = list(outFields = c(\"LongLabel\", \"Type\")),   limit = 2, category = \"Food\" )  dplyr::glimpse(sea_2) #> Rows: 2 #> Columns: 15 #> $ query      <chr> \"sea\", \"sea\" #> $ lat        <dbl> 40.71816, 40.74846 #> $ lon        <dbl> -73.95995, -73.99177 #> $ address    <chr> \"Sea\", \"Sea\" #> $ score      <int> 100, 100 #> $ x          <dbl> -73.95995, -73.99177 #> $ y          <dbl> 40.71816, 40.74846 #> $ LongLabel  <chr> \"Sea, 114 N 6th St, Brooklyn, NY, 11249, USA\", \"Sea, 151 W … #> $ Type       <chr> \"Restaurant\", \"Restaurant\" #> $ xmin       <dbl> -73.96095, -73.99277 #> $ ymin       <dbl> 40.71716, 40.74746 #> $ xmax       <dbl> -73.95895, -73.99077 #> $ ymax       <dbl> 40.71916, 40.74946 #> $ wkid       <int> 4326, 4326 #> $ latestWkid <int> 4326, 4326  # We can use a list of categories sea_3 <- arc_geo(\"sea\",   custom_query = list(outFields = c(\"LongLabel\", \"Type\")),   sourcecountry = \"UK\", limit = 5,   category = c(\"Amusement Park\", \"Aquarium\") ) #>  #> No results for query sea  dplyr::glimpse(sea_3) #> Rows: 1 #> Columns: 3 #> $ query <chr> \"sea\" #> $ lat   <dbl> NA #> $ lon   <dbl> NA # }"},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocoding using the ArcGIS REST API — arc_geo","title":"Geocoding using the ArcGIS REST API — arc_geo","text":"Geocodes addresses given character values. function returns tibble object associated query. function uses SingleLine approach detailed ArcGIS REST docs. multi-field queries (.e. using specific address parameters) use arc_geo_multi() function.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocoding using the ArcGIS REST API — arc_geo","text":"","code":"arc_geo(   address,   lat = \"lat\",   long = \"lon\",   limit = 1,   full_results = FALSE,   return_addresses = TRUE,   verbose = FALSE,   progressbar = TRUE,   outsr = NULL,   langcode = NULL,   sourcecountry = NULL,   category = NULL,   custom_query = list() )"},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocoding using the ArcGIS REST API — arc_geo","text":"address character single line address (\"1600 Pennsylvania Ave NW, Washington\") vector addresses (c(\"Madrid\", \"Barcelona\")). lat latitude column name output data (default  \"lat\"). long longitude column name output data (default  \"lon\"). limit maximum number results return per input address. Note query returns maximum 50 results. full_results returns available data API service. shorthand outFields=*. See References. FALSE (default) default values API returned. See also return_addresses argument. return_addresses return input addresses results TRUE. verbose TRUE detailed logs output console. progressbar Logical. TRUE displays progress bar indicate progress function. outsr spatial reference x,y coordinates returned geocode request. default NULL (.e. parameter used query). See Details arc_spatial_references. langcode Sets language reverse-geocoded addresses returned. sourcecountry Limits candidates returned specified country countries. Acceptable values include three-character country code. can specify multiple country codes limit results one country. category place address type can used filter results. Several values can used well vector (.e. c(\"Cinema\", \"Museum\")). See arc_categories details. custom_query API-specific parameters used, passed named list.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocoding using the ArcGIS REST API — arc_geo","text":"tibble object results. See details output  ArcGIS REST API Service output.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geocoding using the ArcGIS REST API — arc_geo","text":"info valid values ArcGIS REST docs.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo.html","id":"outsr","dir":"Reference","previous_headings":"","what":"outsr","title":"Geocoding using the ArcGIS REST API — arc_geo","text":"spatial reference can specified either well-known ID (WKID). specified, spatial reference output locations service ( WGS84, .e. WKID = 4326)). See arc_spatial_references values examples.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Geocoding using the ArcGIS REST API — arc_geo","text":"ArcGIS REST findAddressCandidates.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geocoding using the ArcGIS REST API — arc_geo","text":"","code":"# \\donttest{ arc_geo(\"Madrid, Spain\") #> # A tibble: 1 × 13 #>   query        lat   lon address score     x     y  xmin  ymin  xmax  ymax  wkid #>   <chr>      <dbl> <dbl> <chr>   <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <int> #> 1 Madrid, S…  40.4 -3.70 Madrid…   100 -3.70  40.4 -3.88  40.2 -3.52  40.6  4326 #> # ℹ 1 more variable: latestWkid <int>  library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  # Several addresses with additional output fields with_params <- arc_geo(c(\"Madrid\", \"Barcelona\"),   custom_query = list(outFields = c(\"LongLabel\", \"CntryName\")) ) #>    |                                                           |                                                  |   0%   |                                                           |=========================                         |  50%   |                                                           |==================================================| 100%  with_params %>%   select(lat, lon, CntryName, LongLabel) #> # A tibble: 2 × 4 #>     lat   lon CntryName LongLabel                        #>   <dbl> <dbl> <chr>     <chr>                            #> 1  40.4 -3.70 España    Madrid, Comunidad de Madrid, ESP #> 2  41.4  2.17 España    Barcelona, Cataluña, ESP          # With options: restrict search to USA with_params_usa <- arc_geo(c(\"Madrid\", \"Barcelona\"),   sourcecountry = \"USA\",   custom_query = list(outFields = c(\"LongLabel\", \"CntryName\")) ) #>    |                                                           |                                                  |   0%   |                                                           |=========================                         |  50%   |                                                           |==================================================| 100%  with_params_usa %>%   select(lat, lon, CntryName, LongLabel) #> # A tibble: 2 × 4 #>     lat   lon CntryName     LongLabel          #>   <dbl> <dbl> <chr>         <chr>              #> 1  31.0 -85.4 United States Madrid, AL, USA    #> 2  35.6 -94.5 United States Barcelona, AR, USA # }"},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocode places on a given area by category — arc_geo_categories","title":"Geocode places on a given area by category — arc_geo_categories","text":"function useful extracting places given category (list categories) near within given location area. wrapper arc_geo(), vectorized category. See arc_categories detailed explanation available values. Note obtaining results needed: Either provide pair coordinates (x,y parameters) used reference geocoding. viewbox (aka bounding box) bbox parameter defining desired extent results. possible combine two approaches (.e. providing x,y,bbox values) order boost geocoding process. See Examples.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocode places on a given area by category — arc_geo_categories","text":"","code":"arc_geo_categories(   category,   x = NULL,   y = NULL,   bbox = NULL,   name = NULL,   lat = \"lat\",   long = \"lon\",   limit = 1,   full_results = FALSE,   verbose = FALSE,   custom_query = list(),   ... )"},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo_categories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocode places on a given area by category — arc_geo_categories","text":"category place address type can used filter results. Several values can used well vector (.e. c(\"Cinema\", \"Museum\")), performing one call value. See Details. x longitude values numeric format. Must range \\(\\left[-180, 180 \\right]\\). y latitude values numeric format. Must range \\(\\left[-90, 90 \\right]\\). bbox numeric vector latitude longitude c(minX, minY, maxX, maxY) restrict search area. See Details. name Optionally, string indicating name address desired results. lat latitude column name output data (default  \"lat\"). long longitude column name output data (default  \"lon\"). limit maximum number results return per input address. Note query returns maximum 50 results. full_results returns available data API service. shorthand outFields=*. See References. FALSE (default) default values API returned. See also return_addresses argument. verbose TRUE detailed logs output console. custom_query API-specific parameters used, passed named list. ... Arguments passed arc_geo sourcecountry Limits candidates returned specified country countries. Acceptable values include three-character country code. can specify multiple country codes limit results one country. outsr spatial reference x,y coordinates returned geocode request. default NULL (.e. parameter used query). See Details arc_spatial_references. langcode Sets language reverse-geocoded addresses returned.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo_categories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocode places on a given area by category — arc_geo_categories","text":"tibble object results. See details output  ArcGIS REST API Service output.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo_categories.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geocode places on a given area by category — arc_geo_categories","text":"Bounding boxes can located using different online tools, Bounding Box Tool. full list valid categories see arc_categories. function vectorized category, means perform one independent call arc_geo() category value. arc_geo_categories() also understands single string categories separated commas (\"Cinema,Museum\"), internally treated c(\"Cinema\", \"Museum\").","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo_categories.html","id":"outsr","dir":"Reference","previous_headings":"","what":"outsr","title":"Geocode places on a given area by category — arc_geo_categories","text":"spatial reference can specified either well-known ID (WKID). specified, spatial reference output locations service ( WGS84, .e. WKID = 4326)). See arc_spatial_references values examples.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo_categories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geocode places on a given area by category — arc_geo_categories","text":"","code":"# \\donttest{ # Full workflow: Gas Stations near Carabanchel, Madrid  # Get Carabanchel carab <- arc_geo(\"Carabanchel, Madrid, Spain\")  # CRS carab_crs <- unique(carab$latestWkid)   library(ggplot2)  base_map <- ggplot(carab) +   geom_point(aes(lon, lat), size = 5, color = \"red\") +   geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),     fill = NA,     color = \"blue\"   ) +   coord_sf(crs = carab_crs)   # Ex1: Search near Carabanchel (not restricted) ex1 <- arc_geo_categories(\"Gas Station\",   # Location   x = carab$lon, y = carab$lat,   limit = 50, full_results = TRUE )   # Reduce number of labels to most common ones library(dplyr)  labs <- ex1 %>%   count(ShortLabel) %>%   slice_max(n = 7, order_by = n) %>%   pull(ShortLabel)  base_map +   geom_point(data = ex1, aes(lon, lat, color = ShortLabel)) +   scale_color_discrete(breaks = labs) +   labs(     title = \"Example 1\",     subtitle = \"Search near (points may be far away)\"   )   # Example 2: Include part of the name, different results ex2 <- arc_geo_categories(\"Gas Station\",   # Name   name = \"Repsol\",   # Location   x = carab$lon, y = carab$lat,   limit = 50, full_results = TRUE )  base_map +   geom_point(data = ex2, aes(lon, lat, color = ShortLabel)) +   labs(     title = \"Example 2\",     subtitle = \"Search near with name\"   )   # Example 3: Near within a extent ex3 <- arc_geo_categories(\"Gas Station\",   name = \"Repsol\",   bbox = c(carab$xmin, carab$ymin, carab$xmax, carab$ymax),   limit = 50, full_results = TRUE )  base_map +   geom_point(data = ex3, aes(lon, lat, color = ShortLabel)) +   labs(     title = \"Example 3\",     subtitle = \"Search near with name and bbox\"   )  # }"},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocoding using the ArcGIS REST API with multi-field query — arc_geo_multi","title":"Geocoding using the ArcGIS REST API with multi-field query — arc_geo_multi","text":"Geocodes addresses given specific address components.function returns tibble associated query. geocoding using single text string use arc_geo() function.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocoding using the ArcGIS REST API with multi-field query — arc_geo_multi","text":"","code":"arc_geo_multi(   address = NULL,   address2 = NULL,   address3 = NULL,   neighborhood = NULL,   city = NULL,   subregion = NULL,   region = NULL,   postal = NULL,   postalext = NULL,   countrycode = NULL,   lat = \"lat\",   long = \"lon\",   limit = 1,   full_results = FALSE,   return_addresses = TRUE,   verbose = FALSE,   progressbar = TRUE,   outsr = NULL,   langcode = NULL,   category = NULL,   custom_query = list() )"},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocoding using the ArcGIS REST API with multi-field query — arc_geo_multi","text":"address, address2, address3, neighborhood, city, subregion Address components  (See Details). region, postal, postalext, countrycode address components, see (See Details). lat latitude column name output data (default  \"lat\"). long longitude column name output data (default  \"lon\"). limit maximum number results return per input address. Note query returns maximum 50 results. full_results returns available data API service. shorthand outFields=*. See References. FALSE (default) default values API returned. See also return_addresses argument. return_addresses return input addresses results TRUE. verbose TRUE detailed logs output console. progressbar Logical. TRUE displays progress bar indicate progress function. outsr spatial reference x,y coordinates returned geocode request. default NULL (.e. parameter used query). See Details arc_spatial_references. langcode Sets language reverse-geocoded addresses returned. category place address type can used filter results. Several values can used well vector (.e. c(\"Cinema\", \"Museum\")). See arc_categories details. custom_query API-specific parameters used, passed named list.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocoding using the ArcGIS REST API with multi-field query — arc_geo_multi","text":"tibble object results. See details output  ArcGIS REST API Service output. resulting output include also input parameters (columns prefix q_) better tracking results.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo_multi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geocoding using the ArcGIS REST API with multi-field query — arc_geo_multi","text":"info valid values ArcGIS REST docs.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo_multi.html","id":"address-components","dir":"Reference","previous_headings":"","what":"Address components","title":"Geocoding using the ArcGIS REST API with multi-field query — arc_geo_multi","text":"function allows perform structured queries different components address. least one field different NA NULL. vector values can provided parameter multiple geocoding. using vectors different parameters, lengths . following list provides brief description parameter: address: string represents first line street address. cases street name house number input, can also used input building name place-name. address2: string represents second line street address. can include street name/house number, building name, place-name, sub unit. address3: string represents third line street address. can include street name/house number, building name, place-name, sub unit. neighborhood: smallest administrative division associated address, typically, neighborhood section larger populated place. city: next largest administrative division associated address, typically, city municipality. subregion: next largest administrative division associated address. Depending country, sub region can represent county, state, province. region: largest administrative division associated address, typically, state province. postal: standard postal code address, typically, three– six-digit alphanumeric code. postalext: postal code extension, United States Postal Service ZIP+4 code. countrycode: value representing country. Providing value increases geocoding speed. Acceptable values include full country name English official language country, two-character country code, three-character country code.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo_multi.html","id":"outsr","dir":"Reference","previous_headings":"","what":"outsr","title":"Geocoding using the ArcGIS REST API with multi-field query — arc_geo_multi","text":"spatial reference can specified either well-known ID (WKID). specified, spatial reference output locations service ( WGS84, .e. WKID = 4326)). See arc_spatial_references values examples.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo_multi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Geocoding using the ArcGIS REST API with multi-field query — arc_geo_multi","text":"ArcGIS REST findAddressCandidates","code":""},{"path":[]},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_geo_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geocoding using the ArcGIS REST API with multi-field query — arc_geo_multi","text":"","code":"# \\donttest{ simple <- arc_geo_multi(   address = \"Plaza Mayor\", limit = 10,   custom_query = list(outFields = c(\"LongLabel\", \"CntryName\", \"Region\")) )  library(dplyr)  simple %>%   select(lat, lon, CntryName, Region, LongLabel) %>%   slice_head(n = 10) #> # A tibble: 10 × 5 #>      lat     lon CntryName Region          LongLabel                             #>    <dbl>   <dbl> <chr>     <chr>           <chr>                                 #>  1 41.7    -4.73 España    Castilla y León Plaza Mayor, Valladolid, Castilla y … #>  2 39.5    -6.37 España    Extremadura     Plaza Mayor, Cáceres, Extremadura, E… #>  3 21.2  -102.   México    Guanajuato      Plaza Mayor, León, Guanajuato, MEX    #>  4 36.7    -4.48 España    Andalucía       Plaza Mayor, Calle Alfonso Ponce de … #>  5  6.24  -75.6  Colombia  Antioquia       Plaza Mayor, Carrera 55, Calle Nueva… #>  6  5.63  -73.5  Colombia  Boyacá          Plaza Mayor, Carrera 10, Villa de Le… #>  7 21.8   -80.0  Cuba      Sancti Spíritus Plaza Mayor, Trinidad, Sancti Spírit… #>  8 38.2    -3.77 España    Andalucía       Plaza Mayor, Plaza Constitución, 237… #>  9 37.1    -5.89 España    Andalucía       Plaza Mayor, Carrer Cortijo Maribáñe… #> 10 37.4    -5.99 España    Andalucía       Plaza Mayor, Plaza de la Encarnación…  # Restrict search to Spain simple2 <- arc_geo_multi(   address = \"Plaza Mayor\", countrycode = \"ESP\",   limit = 10,   custom_query = list(outFields = c(\"LongLabel\", \"CntryName\", \"Region\")) )  simple2 %>%   select(lat, lon, CntryName, Region, LongLabel) %>%   slice_head(n = 10) #> # A tibble: 10 × 5 #>      lat    lon CntryName Region          LongLabel                              #>    <dbl>  <dbl> <chr>     <chr>           <chr>                                  #>  1  41.7 -4.73  España    Castilla y León Plaza Mayor, Valladolid, Castilla y L… #>  2  39.5 -6.37  España    Extremadura     Plaza Mayor, Cáceres, Extremadura, ESP #>  3  36.7 -4.48  España    Andalucía       Plaza Mayor, Calle Alfonso Ponce de L… #>  4  38.2 -3.77  España    Andalucía       Plaza Mayor, Plaza Constitución, 2371… #>  5  37.1 -5.89  España    Andalucía       Plaza Mayor, Carrer Cortijo Maribáñez… #>  6  37.4 -5.99  España    Andalucía       Plaza Mayor, Plaza de la Encarnación,… #>  7  42.4  0.139 España    Aragón          Plaza Mayor, 22330, Aínsa-Sobrarbe, H… #>  8  42.0  0.258 España    Aragón          Plaza Mayor, 22422, Fonz, Huesca, Ara… #>  9  42.5  0.135 España    Aragón          Plaza Mayor, 22360, Labuerda, Huesca,… #> 10  40.4 -1.44  España    Aragón          Plaza Mayor, 44100, Albarracín, Terue…  # Restrict to a region simple3 <- arc_geo_multi(   address = \"Plaza Mayor\", region = \"Segovia\",   countrycode = \"ESP\",   limit = 10,   custom_query = list(outFields = c(\"LongLabel\", \"CntryName\", \"Region\")) )  simple3 %>%   select(lat, lon, CntryName, Region, LongLabel) %>%   slice_head(n = 10) #> # A tibble: 10 × 5 #>      lat   lon CntryName Region          LongLabel                               #>    <dbl> <dbl> <chr>     <chr>           <chr>                                   #>  1  41.4 -4.31 España    Castilla y León Plaza Mayor, Calle del Colegio 4, 4020… #>  2  40.9 -4.35 España    Castilla y León Plaza Mayor, 40142, Lastras del Pozo, … #>  3  41.1 -3.81 España    Castilla y León Plaza Mayor, Pedraza, Segovia, Castill… #>  4  41.3 -3.34 España    Castilla y León Plaza Mayor, Travesía Mayor 1, 40510, … #>  5  41.0 -4.12 España    Castilla y León Plaza Mayor, Calle del Cronista Lecea … #>  6  41.1 -4.65 España    Castilla y León Plaza Mayor, 40467, Tolocirio, Segovia… #>  7  40.9 -4.27 España    Castilla y León Plaza Mayor, 40141, Abades, Segovia, C… #>  8  41.4 -4.11 España    Castilla y León Plaza Mayor, 40354, Adrados, Segovia, … #>  9  41.2 -4.17 España    Castilla y León Plaza Mayor, 40292, Aldea Real, Segovi… #> 10  41.5 -3.47 España    Castilla y León Plaza Mayor, 40555, Aldealengua de San… # }"},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_reverse_geo.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse Geocoding using the ArcGIS REST API — arc_reverse_geo","title":"Reverse Geocoding using the ArcGIS REST API — arc_reverse_geo","text":"Generates address latitude longitude. Latitudes must range \\(\\left[-90, 90 \\right]\\) longitudes range \\(\\left[-180, 180 \\right]\\). function returns tibble associated query.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_reverse_geo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse Geocoding using the ArcGIS REST API — arc_reverse_geo","text":"","code":"arc_reverse_geo(   x,   y,   address = \"address\",   full_results = FALSE,   return_coords = TRUE,   verbose = FALSE,   progressbar = TRUE,   outsr = NULL,   langcode = NULL,   featuretypes = NULL,   locationtype = NULL,   custom_query = list() )"},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_reverse_geo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse Geocoding using the ArcGIS REST API — arc_reverse_geo","text":"x longitude values numeric format. Must range \\(\\left[-180, 180 \\right]\\). y latitude values numeric format. Must range \\(\\left[-90, 90 \\right]\\). address address column name output data (default  \"address\"). full_results returns available data API service. FALSE (default) latitude, longitude address columns returned. return_coords return input coordinates results TRUE. verbose TRUE detailed logs output console. progressbar Logical. TRUE displays progress bar indicate progress function. outsr spatial reference x,y coordinates returned geocode request. default NULL (.e. parameter used query). See Details arc_spatial_references. langcode Sets language reverse-geocoded addresses returned. featuretypes parameter limits possible match types returned. default NULL (.e. parameter used query). See Details. locationtype Specifies whether output geometry featuretypes = \"PointAddress\" featuretypes = \"Subaddress\" matches rooftop point street entrance location. Valid values NULL (.e. using parameter query), rooftop street. custom_query API-specific parameters used, passed named list.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_reverse_geo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse Geocoding using the ArcGIS REST API — arc_reverse_geo","text":"tibble corresponding results. x,y values returned API named lon,lat. Note coordinates correspond geocoded feature, may different x,y values provided inputs. See details output ArcGIS REST API Service output.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_reverse_geo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reverse Geocoding using the ArcGIS REST API — arc_reverse_geo","text":"info valid values ArcGIS REST docs.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_reverse_geo.html","id":"outsr","dir":"Reference","previous_headings":"","what":"outsr","title":"Reverse Geocoding using the ArcGIS REST API — arc_reverse_geo","text":"spatial reference can specified either well-known ID (WKID). specified, spatial reference output locations service ( WGS84, .e. WKID = 4326)). See arc_spatial_references values examples.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_reverse_geo.html","id":"featuretypes","dir":"Reference","previous_headings":"","what":"featuretypes","title":"Reverse Geocoding using the ArcGIS REST API — arc_reverse_geo","text":"See vignette(\"featuretypes\", package = \"arcgeocoder\") detailed explanation parameter. parameter may used filtering type feature returned geocoding. Possible values : \"StreetInt\" \"DistanceMarker\" \"StreetAddress\" \"StreetName\" \"POI\" \"Subaddress\" \"PointAddress\" \"Postal\" \"Locality\" also possible use several values vector (featuretypes = c(\"PointAddress\", \"StreetAddress\")).","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_reverse_geo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Reverse Geocoding using the ArcGIS REST API — arc_reverse_geo","text":"ArcGIS REST reverseGeocode.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_reverse_geo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse Geocoding using the ArcGIS REST API — arc_reverse_geo","text":"","code":"# \\donttest{  arc_reverse_geo(x = -73.98586, y = 40.75728) #> # A tibble: 1 × 3 #>       x     y address                                     #>   <dbl> <dbl> <chr>                                       #> 1 -74.0  40.8 178-198 W 44th St, New York, NY, 10036, USA  # Several coordinates arc_reverse_geo(x = c(-73.98586, -3.188375), y = c(40.75728, 55.95335)) #>    |                                                           |                                                  |   0%   |                                                           |=========================                         |  50%   |                                                           |==================================================| 100% #> # A tibble: 2 × 3 #>        x     y address                                                           #>    <dbl> <dbl> <chr>                                                             #> 1 -74.0   40.8 178-198 W 44th St, New York, NY, 10036, USA                       #> 2  -3.19  56.0 Puppy Yoga Edinburgh, Canongate, Edinburgh, Midlothian, Scotland…  # With options: using some additional parameters sev <- arc_reverse_geo(   x = c(-73.98586, -3.188375),   y = c(40.75728, 55.95335),   # Restrict to these feautures   featuretypes = \"POI,StreetInt\",   # Result on this WKID   outsr = 102100,   verbose = TRUE, full_results = TRUE ) #>    |                                                           |                                                  |   0%   |                                                           |=========================                         |  50% #>  #> Entry point: https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode? #> Parameters: #>    - location=-73.98586,40.75728 #>    - f=json #>    - outSR=102100 #>    - featureTypes=POI,StreetInt #> url: https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode?location=-73.98586,40.75728&f=json&outSR=102100&featureTypes=POI,StreetInt #>    |                                                           |==================================================| 100% #>  #> Entry point: https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode? #> Parameters: #>    - location=-3.188375,55.95335 #>    - f=json #>    - outSR=102100 #>    - featureTypes=POI,StreetInt #> url: https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode?location=-3.188375,55.95335&f=json&outSR=102100&featureTypes=POI,StreetInt #>   dplyr::glimpse(sev) #> Rows: 2 #> Columns: 39 #> $ x            <dbl> -73.985860, -3.188375 #> $ y            <dbl> 40.75728, 55.95335 #> $ address      <chr> \"W 44th St & Broadway, New York, NY, 10036, USA\", \"Puppy … #> $ lat          <dbl> 4976603, 7549115 #> $ lon          <dbl> -8236060.8, -354916.3 #> $ Match_addr   <chr> \"W 44th St & Broadway, New York, New York, 10036\", \"Puppy… #> $ LongLabel    <chr> \"W 44th St & Broadway, New York, NY, 10036, USA\", \"Puppy … #> $ ShortLabel   <chr> \"W 44th St & Broadway\", \"Puppy Yoga Edinburgh\" #> $ Addr_type    <chr> \"StreetInt\", \"POI\" #> $ Type         <chr> NA, \"Fitness Center\" #> $ PlaceName    <chr> NA, \"Puppy Yoga Edinburgh\" #> $ AddNum       <chr> NA, NA #> $ Address      <chr> \"W 44th St & Broadway\", NA #> $ Block        <chr> NA, NA #> $ Sector       <chr> NA, NA #> $ Neighborhood <chr> \"Times Square\", \"Canongate\" #> $ District     <chr> \"Manhattan\", NA #> $ City         <chr> \"New York\", \"Edinburgh\" #> $ MetroArea    <chr> NA, \"Edinburgh\" #> $ Subregion    <chr> \"New York County\", \"Midlothian\" #> $ Region       <chr> \"New York\", \"Scotland\" #> $ RegionAbbr   <chr> \"NY\", \"SCT\" #> $ Territory    <chr> NA, NA #> $ Postal       <chr> \"10036\", \"EH1 3EG\" #> $ PostalExt    <chr> \"4011\", NA #> $ CntryName    <chr> \"United States\", \"United Kingdom\" #> $ CountryCode  <chr> \"USA\", \"GBR\" #> $ X            <dbl> -73.985793, -3.188267 #> $ Y            <dbl> 40.75726, 55.95325 #> $ InputX       <dbl> -73.985860, -3.188375 #> $ InputY       <dbl> 40.75728, 55.95335 #> $ StrucType    <chr> NA, NA #> $ StrucDet     <chr> NA, NA #> $ StrucType1   <chr> NA, NA #> $ StrucType2   <chr> NA, NA #> $ StrucDet1    <chr> NA, NA #> $ StrucDet2    <chr> NA, NA #> $ wkid         <int> 102100, 102100 #> $ latestWkid   <int> 3857, 3857 # }"},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_spatial_references.html","id":null,"dir":"Reference","previous_headings":"","what":"ESRI (ArcGIS) Spatial Reference data base — arc_spatial_references","title":"ESRI (ArcGIS) Spatial Reference data base — arc_spatial_references","text":"Database available spatial references (CRS) tibble format.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_spatial_references.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ESRI (ArcGIS) Spatial Reference data base — arc_spatial_references","text":"tibble 9,364 rows fields: projtype Projection type (\"ProjectedCoordinateSystems\", \"GeographicCoordinateSystems\",\"VerticalCoordinateSystems\") wkid Well-Known ID latestWkid recent wkid, case wkid deprecated authority wkid authority (Esri EPSG) deprecated Logical indicating wkid deprecated description Human-readable description wkid areaname Use area wkid wkt Representation wkid Well-Known Text (WKT). Useful working sf terra","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_spatial_references.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ESRI (ArcGIS) Spatial Reference data base — arc_spatial_references","text":"ESRI Projection Engine factory","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_spatial_references.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ESRI (ArcGIS) Spatial Reference data base — arc_spatial_references","text":"data base useful using outsr parameter functions. projections ids changed time, example Web Mercator wkid  = 102100 deprecated currently wkid = 3857. However, values work, return similar results.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_spatial_references.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"ESRI (ArcGIS) Spatial Reference data base — arc_spatial_references","text":"Data extracted 14 January 2023.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/arcgeocoder/reference/arc_spatial_references.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ESRI (ArcGIS) Spatial Reference data base — arc_spatial_references","text":"","code":"# \\donttest{ # Get all possible valuesdata(\"arc_spatial_references\") arc_spatial_references #> # A tibble: 9,364 × 8 #>    projtype      wkid latestWkid authority deprecated description areaname wkt   #>    <chr>        <int>      <int> <chr>     <lgl>      <chr>       <chr>    <chr> #>  1 ProjectedCo…  2000       2000 EPSG      FALSE      Anguilla 1… Anguill… \"PRO… #>  2 ProjectedCo…  2001       2001 EPSG      FALSE      Antigua 19… Antigua… \"PRO… #>  3 ProjectedCo…  2002       2002 EPSG      FALSE      Dominica 1… Dominic… \"PRO… #>  4 ProjectedCo…  2003       2003 EPSG      FALSE      Grenada 19… Grenada… \"PRO… #>  5 ProjectedCo…  2004       2004 EPSG      FALSE      Montserrat… Montser… \"PRO… #>  6 ProjectedCo…  2005       2005 EPSG      FALSE      St Kitts 1… St Kitt… \"PRO… #>  7 ProjectedCo…  2006       2006 EPSG      FALSE      St Lucia 1… St Luci… \"PRO… #>  8 ProjectedCo…  2007       2007 EPSG      FALSE      St Vincent… St Vinc… \"PRO… #>  9 ProjectedCo…  2008       2008 EPSG      TRUE       NAD 1927 S… Canada … \"PRO… #> 10 ProjectedCo…  2009       2009 EPSG      FALSE      NAD 1927 S… Canada … \"PRO… #> # ℹ 9,354 more rows  # Request with deprecated Web Mercator library(dplyr) wkid <- arc_spatial_references %>%   filter(latestWkid == 3857 & deprecated == TRUE) %>%   slice(1)  glimpse(wkid) #> Rows: 1 #> Columns: 8 #> $ projtype    <chr> \"ProjectedCoordinateSystems\" #> $ wkid        <int> 102100 #> $ latestWkid  <int> 3857 #> $ authority   <chr> \"Esri\" #> $ deprecated  <lgl> TRUE #> $ description <chr> \"WGS 1984 Web Mercator Major Auxiliary Sphere\" #> $ areaname    <chr> \"World - 85~S to 85~N\" #> $ wkt         <chr> \"PROJCS[\\\"WGS_1984_Web_Mercator_Auxiliary_Sphere\\\",GEOGCS[…  add <- arc_geo(\"London, United Kingdom\", outsr = wkid$wkid)  # Note values lat, lon and wkid. latestwkid give the current valid wkid add %>%   select(lat, lon, wkid, latestWkid) %>%   glimpse() #> Rows: 1 #> Columns: 4 #> $ lat        <dbl> 6710246 #> $ lon        <dbl> -14052.55 #> $ wkid       <int> 102100 #> $ latestWkid <int> 3857  # See with sf  try(sf::st_crs(wkid$wkid)) #> Warning: GDAL Error 1: PROJ: proj_create_from_database: crs not found: EPSG:102100 #> Coordinate Reference System: NA  # But try(sf::st_crs(wkid$latestWkid)) #> Coordinate Reference System: #>   User input: EPSG:3857  #>   wkt: #> PROJCRS[\"WGS 84 / Pseudo-Mercator\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             MEMBER[\"World Geodetic System 1984 (G2296)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"Popular Visualisation Pseudo-Mercator\", #>         METHOD[\"Popular Visualisation Pseudo Mercator\", #>             ID[\"EPSG\",1024]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"False easting\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"easting (X)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"northing (Y)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Web mapping and visualisation.\"], #>         AREA[\"World between 85.06°S and 85.06°N.\"], #>         BBOX[-85.06,-180,85.06,180]], #>     ID[\"EPSG\",3857]]  # or try(sf::st_crs(wkid$wkt)) #> Coordinate Reference System: #>   User input: PROJCS[\"WGS_1984_Web_Mercator_Auxiliary_Sphere\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mercator_Auxiliary_Sphere\"],PARAMETER[\"False_Easting\",0.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",0.0],PARAMETER[\"Standard_Parallel_1\",0.0],PARAMETER[\"Auxiliary_Sphere_Type\",0.0],UNIT[\"Meter\",1.0]]  #>   wkt: #> PROJCRS[\"WGS 84 / Pseudo-Mercator\", #>     BASEGEOGCRS[\"WGS 84\", #>         DATUM[\"World Geodetic System 1984\", #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ID[\"EPSG\",6326]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433]]], #>     CONVERSION[\"unnamed\", #>         METHOD[\"Popular Visualisation Pseudo Mercator\", #>             ID[\"EPSG\",1024]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"False easting\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1, #>                 ID[\"EPSG\",9001]]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1, #>                 ID[\"EPSG\",9001]]]] # }"},{"path":"https://dieghernan.github.io/arcgeocoder/news/index.html","id":"arcgeocoder-021","dir":"Changelog","previous_headings":"","what":"arcgeocoder 0.2.1","title":"arcgeocoder 0.2.1","text":"CRAN release: 2024-12-17 Update documentation.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/news/index.html","id":"arcgeocoder-020","dir":"Changelog","previous_headings":"","what":"arcgeocoder 0.2.0","title":"arcgeocoder 0.2.0","text":"CRAN release: 2024-03-21 arc_geo_categories() now vectorized category argument. Fix typos documentation. Now vector can used named element custom_query. Add ggplot2 sf Suggests.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/news/index.html","id":"arcgeocoder-010","dir":"Changelog","previous_headings":"","what":"arcgeocoder 0.1.0","title":"arcgeocoder 0.1.0","text":"CRAN release: 2024-01-15 First CRAN release 🚀. Add articles pkgdown site include icons examples. Status changed active. Added new database arcgeocoder::arc_spatial_references.","code":""},{"path":"https://dieghernan.github.io/arcgeocoder/news/index.html","id":"arcgeocoder-001","dir":"Changelog","previous_headings":"","what":"arcgeocoder 0.0.1","title":"arcgeocoder 0.0.1","text":"Initial release.","code":""}]
